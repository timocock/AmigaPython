
; $VER: CRC32 2.0 (17.10.99) ©1999 Irmen de Jong

;****************************************************************
;*                                                              *
;*  CALCCRC32 - Calculates 32 bits CRC checksum                 *
;*								*
;*  ULONG CRC32(ULONG startcrc, void* data, ULONG size)		*
;*  d0		      d0           a0          d1		*
;*                                                              *
;* INPUT: d0.l=start crc value (usually 0)                        *
;*        a0=DataBuffer, d1.l=ByteSize                          *
;* OUTPUT: d0.l=CRC32 value                                     *
;*                                                              *
;****************************************************************
    SECTION CRC32,CODE

    XDEF    _CalcCRC32

	SECTION CALCCRC32,CODE
	
_CalcCRC32:
	movem.l	d1/d2/d3/d4/a2,-(sp)
	move.l	d0,d2		; keep crc in d2
	lea.l	_crc_table,a2	; crc table in a2
  IFND M68000
	tst.l	a0		; buffer == 0?
  ELSE
	cmp.l	#0,a0
  ENDC
	bne.s	.L3
	moveq.l	#0,d0		; yes --> crc=0
	bra.w	.exit

	; -- buffer is not 0, so we have to work:
.L3:
	not.l	d2		; invert crc
	moveq.l	#3,d4
	cmp.l	d1,d4		; is length <=3 (less than 4?)
	bcc.s	.endloop	; yep, exit this loop
	moveq.l	#0,d3
	bra.s	.loop
	
	CNOP 0,4		; align loop on longword (faster on 32 bit CPUs)

.loop:
	moveq.l	#0,d0
	move.b	(a0)+,d0	; fetch data byte 2
	eor.b	d2,d0
	lsr.l	#8,d2
  IFND M68000
	move.l	(a2,d0.w*4),d0	; crc table lookup
  ELSE
	add.w	d0,d0
	add.w	d0,d0
	move.l	0(a2,d0.w),d0
  ENDC
	eor.l	d0,d2

	moveq.l	#0,d0
	move.b	(a0)+,d0	; fetch data byte 2
	eor.b	d2,d0
	lsr.l	#8,d2
  IFND M68000
	move.l	(a2,d0.w*4),d0	; crc table lookup
  ELSE
	add.w	d0,d0
	add.w	d0,d0
	move.l	0(a2,d0.w),d0
  ENDC
	eor.l	d0,d2

	moveq.l	#0,d0
	move.b	(a0)+,d0	; fetch data byte 3
	eor.b	d2,d0
	lsr.l	#8,d2
  IFND M68000
	move.l	(a2,d0.w*4),d0	; crc table lookup
  ELSE
	add.w	d0,d0
	add.w	d0,d0
	move.l	0(a2,d0.w),d0
  ENDC
	eor.l	d0,d2

	moveq.l	#0,d0
	move.b	(a0)+,d0	; fetch data byte 4
	eor.b	d2,d0
	lsr.l	#8,d2
  IFND M68000
	move.l	(a2,d0.w*4),d0	; crc table lookup
  ELSE
	add.w	d0,d0
	add.w	d0,d0
	move.l	0(a2,d0.w),d0
  ENDC
	eor.l	d0,d2

	subq.l	#4,d1
	;; moveq.l	#3,d4	; (d4 still contains 3)
	cmp.l	d1,d4		; is length <=3 (less than 4)?
	bcs.s	.loop		; nope, continue loop

.endloop:
	tst.w	d1		; do we have some bytes left?
	beq.s	.done		; nope, done

	subq.w	#1,d1		; compensate 1 for dbra
.restloop:
	moveq.l	#0,d0
	move.b	(a0)+,d0	; fetch data byte
	eor.b	d2,d0
	lsr.l	#8,d2
  IFND M68000
	move.l	(a2,d0.w*4),d0	; crc table lookup
  ELSE
	add.w	d0,d0
	add.w	d0,d0
	move.l	0(a2,d0.w),d0
  ENDC
	eor.l	d0,d2
	dbra	d1,.restloop	; again if we have more bytes left

.done:
	move.l	d2,d0
	not.l	d0		; invert crc

.exit:
	movem.l	(sp)+,d1/d2/d3/d4/a2
	rts

	SECTION CRC32TAB,DATA


_crc_table
    dc.l    $00000000,$77073096,$EE0E612C,$990951BA
    dc.l    $076DC419,$706AF48F,$E963A535,$9E6495A3
    dc.l    $0EDB8832,$79DCB8A4,$E0D5E91E,$97D2D988
    dc.l    $09B64C2B,$7EB17CBD,$E7B82D07,$90BF1D91
    dc.l    $1DB71064,$6AB020F2,$F3B97148,$84BE41DE
    dc.l    $1ADAD47D,$6DDDE4EB,$F4D4B551,$83D385C7
    dc.l    $136C9856,$646BA8C0,$FD62F97A,$8A65C9EC
    dc.l    $14015C4F,$63066CD9,$FA0F3D63,$8D080DF5
    dc.l    $3B6E20C8,$4C69105E,$D56041E4,$A2677172
    dc.l    $3C03E4D1,$4B04D447,$D20D85FD,$A50AB56B
    dc.l    $35B5A8FA,$42B2986C,$DBBBC9D6,$ACBCF940
    dc.l    $32D86CE3,$45DF5C75,$DCD60DCF,$ABD13D59
    dc.l    $26D930AC,$51DE003A,$C8D75180,$BFD06116
    dc.l    $21B4F4B5,$56B3C423,$CFBA9599,$B8BDA50F
    dc.l    $2802B89E,$5F058808,$C60CD9B2,$B10BE924
    dc.l    $2F6F7C87,$58684C11,$C1611DAB,$B6662D3D
    dc.l    $76DC4190,$01DB7106,$98D220BC,$EFD5102A
    dc.l    $71B18589,$06B6B51F,$9FBFE4A5,$E8B8D433
    dc.l    $7807C9A2,$0F00F934,$9609A88E,$E10E9818
    dc.l    $7F6A0DBB,$086D3D2D,$91646C97,$E6635C01
    dc.l    $6B6B51F4,$1C6C6162,$856530D8,$F262004E
    dc.l    $6C0695ED,$1B01A57B,$8208F4C1,$F50FC457
    dc.l    $65B0D9C6,$12B7E950,$8BBEB8EA,$FCB9887C
    dc.l    $62DD1DDF,$15DA2D49,$8CD37CF3,$FBD44C65
    dc.l    $4DB26158,$3AB551CE,$A3BC0074,$D4BB30E2
    dc.l    $4ADFA541,$3DD895D7,$A4D1C46D,$D3D6F4FB
    dc.l    $4369E96A,$346ED9FC,$AD678846,$DA60B8D0
    dc.l    $44042D73,$33031DE5,$AA0A4C5F,$DD0D7CC9
    dc.l    $5005713C,$270241AA,$BE0B1010,$C90C2086
    dc.l    $5768B525,$206F85B3,$B966D409,$CE61E49F
    dc.l    $5EDEF90E,$29D9C998,$B0D09822,$C7D7A8B4
    dc.l    $59B33D17,$2EB40D81,$B7BD5C3B,$C0BA6CAD
    dc.l    $EDB88320,$9ABFB3B6,$03B6E20C,$74B1D29A
    dc.l    $EAD54739,$9DD277AF,$04DB2615,$73DC1683
    dc.l    $E3630B12,$94643B84,$0D6D6A3E,$7A6A5AA8
    dc.l    $E40ECF0B,$9309FF9D,$0A00AE27,$7D079EB1
    dc.l    $F00F9344,$8708A3D2,$1E01F268,$6906C2FE
    dc.l    $F762575D,$806567CB,$196C3671,$6E6B06E7
    dc.l    $FED41B76,$89D32BE0,$10DA7A5A,$67DD4ACC
    dc.l    $F9B9DF6F,$8EBEEFF9,$17B7BE43,$60B08ED5
    dc.l    $D6D6A3E8,$A1D1937E,$38D8C2C4,$4FDFF252
    dc.l    $D1BB67F1,$A6BC5767,$3FB506DD,$48B2364B
    dc.l    $D80D2BDA,$AF0A1B4C,$36034AF6,$41047A60
    dc.l    $DF60EFC3,$A867DF55,$316E8EEF,$4669BE79
    dc.l    $CB61B38C,$BC66831A,$256FD2A0,$5268E236
    dc.l    $CC0C7795,$BB0B4703,$220216B9,$5505262F
    dc.l    $C5BA3BBE,$B2BD0B28,$2BB45A92,$5CB36A04
    dc.l    $C2D7FFA7,$B5D0CF31,$2CD99E8B,$5BDEAE1D
    dc.l    $9B64C2B0,$EC63F226,$756AA39C,$026D930A
    dc.l    $9C0906A9,$EB0E363F,$72076785,$05005713
    dc.l    $95BF4A82,$E2B87A14,$7BB12BAE,$0CB61B38
    dc.l    $92D28E9B,$E5D5BE0D,$7CDCEFB7,$0BDBDF21
    dc.l    $86D3D2D4,$F1D4E242,$68DDB3F8,$1FDA836E
    dc.l    $81BE16CD,$F6B9265B,$6FB077E1,$18B74777
    dc.l    $88085AE6,$FF0F6A70,$66063BCA,$11010B5C
    dc.l    $8F659EFF,$F862AE69,$616BFFD3,$166CCF45
    dc.l    $A00AE278,$D70DD2EE,$4E048354,$3903B3C2
    dc.l    $A7672661,$D06016F7,$4969474D,$3E6E77DB
    dc.l    $AED16A4A,$D9D65ADC,$40DF0B66,$37D83BF0
    dc.l    $A9BCAE53,$DEBB9EC5,$47B2CF7F,$30B5FFE9
    dc.l    $BDBDF21C,$CABAC28A,$53B39330,$24B4A3A6
    dc.l    $BAD03605,$CDD70693,$54DE5729,$23D967BF
    dc.l    $B3667A2E,$C4614AB8,$5D681B02,$2A6F2B94
    dc.l    $B40BBE37,$C30C8EA1,$5A05DF1B,$2D02EF8D

    END

